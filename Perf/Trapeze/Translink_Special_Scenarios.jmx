<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="QA Site Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TripPlanner" elementType="Argument">
            <stringProp name="Argument.name">TripPlanner</stringProp>
            <stringProp name="Argument.value">https://tripplanning-beta.translink.ca/#/app/tripplanning</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">staging</stringProp>
          </elementProp>
          <elementProp name="NextBus" elementType="Argument">
            <stringProp name="Argument.name">NextBus</stringProp>
            <stringProp name="Argument.value">https://tripplanning-beta.translink.ca/#/app/nextdepartures</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">staging</stringProp>
          </elementProp>
          <elementProp name="FeedbackForm" elementType="Argument">
            <stringProp name="Argument.name">FeedbackForm</stringProp>
            <stringProp name="Argument.value">https://feedback.qa.translink.ca/#/feedback</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">staging</stringProp>
          </elementProp>
          <elementProp name="OPSWeb" elementType="Argument">
            <stringProp name="Argument.name">OPSWeb</stringProp>
            <stringProp name="Argument.value">http://tropst01:9053/hiwire?.a=opLogin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">staging</stringProp>
          </elementProp>
          <elementProp name="TripPlannerQA" elementType="Argument">
            <stringProp name="Argument.name">TripPlannerQA</stringProp>
            <stringProp name="Argument.value">https://tripplanning.qa.translink.ca/#/app/tripplanning</stringProp>
            <stringProp name="Argument.desc">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NextBusQA" elementType="Argument">
            <stringProp name="Argument.name">NextBusQA</stringProp>
            <stringProp name="Argument.value">https://tripplanning.qa.translink.ca/#/app/nextdepartures</stringProp>
            <stringProp name="Argument.desc">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FeedbackFormQA" elementType="Argument">
            <stringProp name="Argument.name">FeedbackFormQA</stringProp>
            <stringProp name="Argument.value">https://feedback.qa.translink.ca/#/feedback</stringProp>
            <stringProp name="Argument.desc">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OPSWebQA" elementType="Argument">
            <stringProp name="Argument.name">OPSWebQA</stringProp>
            <stringProp name="Argument.value">http://tropst01:9053/hiwire?.a=opLogin</stringProp>
            <stringProp name="Argument.desc">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 1 - Marine and Capilano" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 1 - Marine and Capilano
 *  
 *  Marine and Capilano -&gt; Georgia and Burrard	
 *  Arriving at 6:00 AM on Sunday Date
 *  Results: Cannot match parameters: Time out at 20 seconds and error message is displayed
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;
import java.time.LocalDate;
import java.time.DayOfWeek;
import java.time.temporal.TemporalAdjusters;
import java.time.format.DateTimeFormatter;

// Need to get the next Sunday
final LocalDate today = LocalDate.now();
final LocalDate nextSunday = today.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));
DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;M/d/YYYY&quot;); // this is the format used in the trip planner form
String NS = nextSunday.format(formatter);

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return an error after 20 seconds (plus a brief margin to allow the message to get rendered on screen)
WebDriverWait errorWait = new WebDriverWait(browser, 21);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;6:00 AM&apos;);

// Set the date
WebElement datePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[aria-label=&quot;Arrival Date&quot;]&apos;)));
datePicker.clear();
datePicker.sendKeys(NS);

// Set the Allow More Transfers option
WebElement rdoMoreTransfers = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-button[aria-label=&quot;Allow More Transfers (Up to 3 Transfers)&quot;]&apos;)));
rdoMoreTransfers.click();

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Marine and Capilano&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Georgia and Burrard&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	errorWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;p[ng-if=&quot;!noItinerariesOnWeekday &amp;&amp; !noItinerariesOnHoliday &amp;&amp; !noItinerariesOutsideDateRange&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;Timeout message displayed in browser&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Timeout message not returned within 20 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 2 - Granville and Davie - Allow More Transfers" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 2 - Granville and Davie - Allow More Transfers
 *  
 *  Granville and Davie -&gt; Waterfront Station
 *  Arriving at 5:00 PM on Today’s Date with &quot;Allow more transfers&quot; selected
 *  Results: Too many possibly itinerary layouts: Time out maximum 30 seconds and error message displayed
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return an error after 30 seconds (plus a brief margin to allow the message to get rendered on screen)
WebDriverWait errorWait = new WebDriverWait(browser, 31);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;5:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Set the Allow More Transfers option
WebElement rdoMoreTransfers = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-button[aria-label=&quot;Allow More Transfers (Up to 3 Transfers)&quot;]&apos;)));
rdoMoreTransfers.click();

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Granville and Davie&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Waterfront Station&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	errorWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;p[ng-if=&quot;!noItinerariesOnWeekday &amp;&amp; !noItinerariesOnHoliday&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;Timeout message displayed in browser&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Timeout message not returned within 30 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 3 - Granville and Davie" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 3 - Granville and Davie - Default options
 *  
 *  Granville and Davie -&gt; Waterfront Station
 *  Arriving at 5:00 PM on Today’s Date	
 *  Results: Default Parameter Set used: Response within 12 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries within 12 seconds
WebDriverWait itinWait = new WebDriverWait(browser, 12);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;5:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Granville and Davie&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Waterfront Station&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	itinWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 12 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 12 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 4 -  Lonsdale and 29" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 4 - Lonsdale and 29 - Multiple Transportation Types
 *  
 *  Lonsdale and 29 -&gt; Steveston Village
 *  Arriving at 12:00 PM on Today’s Date
 *  Results: Involves multiple transportation types: Response within 12 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries within 12 seconds
WebDriverWait itinWait = new WebDriverWait(browser, 12);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Lonsdale and 29&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Steveston Village&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	itinWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 12 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 12 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 5 -  22nd Street Station" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 5 - 22nd Street Station - Data Set Reruns
 *  
 *  22nd Street Station -&gt; 29th Avenue Station
 *  Arriving at 12:00 PM on Today’s Date
 *  Results: Vanilla trip: Response within 5 seconds 
 *  	Rerun data set: Response within 1 second
 *  	Re-run data set, but select “View Detail”:  Response within 2 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario expects reruns to return results within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);
// This scenario also expects details to be returned within 2 seconds
WebDriverWait twoSecWait = new WebDriverWait(browser, 2);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;22nd Street Station&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;29th Avenue Station&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 5 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned in 5 seconds&apos;);
}
// If the previous result returned in time, do the first rerun.
if (SampleResult.isSuccessful()) {
	try{
		origin.sendKeys(&apos;22nd Street Station&apos;);
		// Refresh the originPick
		originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
		originPick.click();
		destination.sendKeys(&apos;29th Avenue Station&apos;);
		// Refresh the destPick
		destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
		destPick.click();
		// Wait for the results to return - should be a quick return
		oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
		SampleResult.setResponseMessage(&apos;At least one itinerary returned within 1 second&apos;);
	}
	catch (TimeoutException te) {
		SampleResult.setSuccessful(false);
		SampleResult.setResponseMessage(&apos;Itineraries not returned in 1 second&apos;);
	}
}
else {
	// Clean up, since the first run didn&apos;t work
	browser.quit();
}
// If the rerun worked, go for the second rerun, plus click &quot;View Results&quot;
if (SampleResult.isSuccessful() &amp;&amp; !browser.toString().contains(&apos;null&apos;)) {
	try{
		origin.sendKeys(&apos;22nd Street Station&apos;);
		// Refresh the originPick
		originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
		originPick.click();
		destination.sendKeys(&apos;29th Avenue Station&apos;);
		// Refresh the destPick
		destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
		destPick.click();
		// Find the first itinerary and click it
		WebElement itinDetails  = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
		itinDetails.click();
		// Wait for the details to get filled out - should be a quick render
		twoSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[class=&quot;itinerary-details-section layout-column&quot;]&apos;)));
		SampleResult.setResponseMessage(&apos;The itinerary details returned within 2 seconds&apos;);
	}
	catch (TimeoutException te) {
		SampleResult.setSuccessful(false);
		SampleResult.setResponseMessage(&apos;Itinerary details not returned in 2 seconds&apos;);
	}
	if (!SampleResult.isSuccessful()) {
		// Clean up, as the details didn&apos;t return in time
		browser.quit();
	}
}
else {
	// Clean up, since the first rerun didn&apos;t work
	if (!browser.toString().contains(&apos;null&apos;)) {
		browser.quit();
	}
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 6 -  Burrard and Robson" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 6 - Burrard and Robson - Requires Wheelchair Accessible
 *  
 *  Burrard and Robson -&gt; Hamilton and Pender
 *  Arriving at 12:00 PM on Today’s Date with &quot;Requires Wheelchair Accessible&quot; selected
 *  Results: Wheelchair accessible with many layout possibilities: Response within 20 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries within 20 seconds
WebDriverWait itinWait = new WebDriverWait(browser, 20);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Set the Requires Wheelchair option
WebElement cbWheelchair = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-checkbox[aria-label=&quot;Wheel Chair Accessible&quot;]&apos;)));
cbWheelchair.click();

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Burrard and Robson&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Hamilton and Pender&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	itinWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 20 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 20 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 7 - Newton Exchange - Allow More Transfers" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 7 - Newton Exchange - Allow More Transfers
 *  
 *  Newton Exchange -&gt; Coquitlam Central Station
 *  Arriving at 12:00 PM on Today’s Date with &quot;Allow More Transfers&quot; selected
 *  Results: Involves four or more legs, with allow more transfers: Response within 13 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries after 13 seconds
WebDriverWait itinWait = new WebDriverWait(browser, 13);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Set the Allow More Transfers option
WebElement rdoMoreTransfers = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-button[aria-label=&quot;Allow More Transfers (Up to 3 Transfers)&quot;]&apos;)));
rdoMoreTransfers.click();

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Newton Exchange&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Coquitlam Central Station&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	itinWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 13 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 13 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 8 - Newton Exchange" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 8 - Newton Exchange - Accept Default Options
 *  
 *  Newton Exchange -&gt; Coquitlam Central Station
 *  Arriving at 12:00 PM on Today’s Date
 *  Results: Involves four legs: Response within 10 seconds
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries after 10 seconds
WebDriverWait itinWait = new WebDriverWait(browser, 10);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;TripPlanner&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Newton Exchange&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Coquitlam Central Station&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	itinWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 10 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 10 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 10 - Schedule Lookup" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 10 - Schedule Lookup - Bus Route 116
 *  
 *  Search for bus route 116
 *  Results: Response within 1 second
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return the route details within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;NextBus&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Find the search field, and enter the route number
WebElement search = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Routes, Stops or Locations&quot;]&apos;)));
search.sendKeys(&apos;116&apos;);

// Pick a route to display
WebElement searchPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;RTE&quot;]&apos;)));
searchPick.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-list-item[ng-repeat=&quot;stop in $root.stops&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The route was returned within 1 second&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The route was not returned within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 11 - Next Bus at Stop" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 11 - Next Bus - Bus Stop 52707
 *  
 *  Search for bus stop 52707 to see the next scheduled bus	
 *  Results: Response within 1 second
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return the route details within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;NextBus&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Find the search field, and enter the stop number
WebElement search = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Routes, Stops or Locations&quot;]&apos;)));
search.sendKeys(&apos;52707&apos;);

// Pick the stop to display
WebElement searchPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;STP&quot;]&apos;)));
searchPick.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-toast#info_toast button[aria-label=&quot;Close&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The stop was returned within 1 second&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The stop was not returned within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 12 - Find Nearby Stops" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Trip Planner Special Scenario 12 - Find Nearby Stops - Marine Way and Boundary
 *  
 *  Search for Marine Way and Boundary to see any nearby stops	
 *  Results: Response within 1 second
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return the route details within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;NextBus&quot;));

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Find the search field, and enter the origin
WebElement search = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Routes, Stops or Locations&quot;]&apos;)));
search.sendKeys(&apos;Marine Way and Boundary&apos;);

// Pick the origin to display
WebElement searchPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;ADR&quot;]&apos;)));
searchPick.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;v-pane[expanded=&quot;route.selected&quot;] v-pane-header&apos;)));
	SampleResult.setResponseMessage(&apos;The stop was returned within 1 second&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The stop was not returned within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 1 - Bus" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 1 - Bus Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;Bus&quot;]&apos;)));
subjectPick.click();

// This scenario uses the bus form, so find and enter the Route Number
Thread.sleep(500); // pause for a second to let the select field close

WebElement rteNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;RouteNumber&quot;]&apos;)));
rteNumber.sendKeys(&apos;116&apos;);

// Find and enter the vehicle number
WebElement vehNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;VehicleNumber&quot;]&apos;)));
vehNumber.sendKeys(&apos;2&apos;);

// Find and enter the stop number
WebElement stopNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;StopNumber&quot;]&apos;)));
stopNumber.sendKeys(&apos;52707&apos;);

// Find and enter the Location
WebElement location = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Location&quot;]&apos;)));
location.sendKeys(&apos;1st and Main&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 2 - SkyTrain" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 2 - SkyTrain Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;SkyTrain&quot;]&apos;)));
subjectPick.click();

// This scenario uses the skytrain form, so find and enter the line
Thread.sleep(500); // pause for a second to let the select field close

WebElement rdoLine = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;skyTrainLine&quot;] md-radio-button[value=&quot;Canada Line&quot;]&apos;)));
rdoLine.click();

// Find and enter the direction
WebElement rdoDirection = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;skyTrainLineDir&quot;] md-radio-button[value=&quot;YVR-Airport&quot;]&apos;)));
rdoDirection.click();

// Find and enter the station
WebElement stopNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Stop&quot;]&apos;)));
stopNumber.sendKeys(&apos;Station 1&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 3 - SeaBus" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 3 - SeaBus Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;SeaBus&quot;]&apos;)));
subjectPick.click();

// This scenario uses the seabus form, so there are no special fields to fill out
Thread.sleep(500); // pause for a second to let the select field close

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();
// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);
// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 4 - West Coast Express" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 4 - West Coast Express Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;West Coast Express&quot;]&apos;)));
subjectPick.click();

// This scenario uses the west coast express form, so find and enter the direction
Thread.sleep(500); // pause for a second to let the select field close

WebElement rdoDirection = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;wceDir&quot;] md-radio-button[value=&quot;King George&quot;]&apos;)));
rdoDirection.click();

// Find and enter the station
WebElement stopNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Stop&quot;]&apos;)));
stopNumber.sendKeys(&apos;Station 1&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 5 - HandyDART" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 5 - HandyDART Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;HandyDART&quot;]&apos;)));
subjectPick.click();

// This scenario uses the handyDART form, so find and enter the ID Number
Thread.sleep(500); // pause for a second to let the select field close

WebElement idNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;HandyDARTID&quot;]&apos;)));
idNumber.sendKeys(&apos;116&apos;);

// Find and enter the Location
WebElement location = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Location&quot;]&apos;)));
location.sendKeys(&apos;1st and Main&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 6 - HandyDART Taxi" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 6 - HandyDART Taxi Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;HandyDART Taxi&quot;]&apos;)));
subjectPick.click();

// This scenario uses the handyDART form, so find and enter the ID Number
Thread.sleep(500); // pause for a second to let the select field close

WebElement idNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;HandyDARTID&quot;]&apos;)));
idNumber.sendKeys(&apos;116&apos;);

// Find and enter the taxi company
WebElement vehNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;TaxiCompany&quot;]&apos;)));
vehNumber.sendKeys(&apos;Big Yellow&apos;);

// Find and enter the taxicab number
WebElement stopNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;TaxiNumber&quot;]&apos;)));
stopNumber.sendKeys(&apos;5&apos;);

// Find and enter the Location
WebElement location = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Location&quot;]&apos;)));
location.sendKeys(&apos;1st and Main&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 7 - Web/Technical" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 7 - Web/Technical Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;Web/Technical&quot;]&apos;)));
subjectPick.click();

// This scenario uses the web/technical form, so find and select a service
Thread.sleep(500); // pause for a second to let the select field close

WebElement service = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;Service&quot;]&apos;)));
service.click();
WebElement serviceOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[value=&quot;Trip Planner&quot;]&apos;)));
serviceOption.click();

// Find and enter the url
WebElement pageURL = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;PageURL&quot;]&apos;)));
pageURL.sendKeys(&apos;https://tripplanning.translink.ca&apos;);

// Find and enter the operating system
WebElement oSystem = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;OS&quot;]&apos;)));
oSystem.sendKeys(&apos;Windows 10&apos;);

// Find and enter the browser
WebElement userBrowser = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;Browser&quot;]&apos;)));
userBrowser.sendKeys(&apos;Chrome&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 8 - Lost Property" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 8 - Lost Property Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;Lost Property&quot;]&apos;)));
subjectPick.click();

// This scenario uses the lost property form, so find and select a location 
Thread.sleep(500); // pause for a second to let the select field close

// let&apos;s use &quot;bus&quot; since that gives us more fields to fill out
WebElement lostItemLocation = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;lostItemLocation&quot;]&apos;)));
lostItemLocation.click();
WebElement lostItemLocationOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[value=&quot;Bus&quot;]&apos;)));
lostItemLocationOption.click();
Thread.sleep(500); // pause for a second to let the select field close

// Find and enter the route number
WebElement rteNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;RouteNumber&quot;]&apos;)));
rteNumber.sendKeys(&apos;116&apos;);

// Find and enter the stop number
WebElement stopNumber = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;StopNumber&quot;]&apos;)));
stopNumber.sendKeys(&apos;52707&apos;);

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Feedback Form Scenario 9 - Other" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  Feedback Form Special Scenario 9 - Other Feedback Form Submission
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a submission within 1 second
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;FeedbackForm&quot;));

// Find the subject field and open it
WebElement feedbackSubject = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select[name=&quot;subject&quot;]&apos;)));
feedbackSubject.click();

// Pick the subject
WebElement subjectPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-select-menu md-option[aria-label=&quot;Other&quot;]&apos;)));
subjectPick.click();

/// This scenario uses the other form, so there are no special fields to fill out
Thread.sleep(500); // pause for a second to let the select field close

// Next, find and enter the common form details
// Feedback/Incident Details
WebElement feedbackDetails = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;textarea[name=&quot;COM_IncidentDetails&quot;]&apos;)));
feedbackDetails.sendKeys(&apos;Some feedback details to fill some space in the form.&apos;);

// Incident Date (bit complicated - have to open the date picker and select today)
WebElement feedbackDatePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-datepicker[name=&quot;incidentDate&quot;]&apos;)));
feedbackDatePicker.click();

WebElement feedbackDate = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.md-calendar td.md-calendar-date.md-calendar-date-today.md-focus span&apos;)));
feedbackDate.click();

// Can leave the time to the default (&quot;now&quot;)
// Skip the attachment for now

// Contact Details
// First Name
WebElement firstName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerFirstName&quot;]&apos;)));
firstName.sendKeys(&apos;Testfirst&apos;);

// Last Name
WebElement lastName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerLastName&quot;]&apos;)));
lastName.sendKeys(&apos;Testlast&apos;);

// Email
WebElement email = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerEmail&quot;]&apos;)));
email.sendKeys(&apos;t@test.com&apos;);

// Phone Number
WebElement phone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[name=&quot;CustomerHomePhone&quot;]&apos;)));
phone.sendKeys(&apos;5064557725&apos;);

// Response Required (let&apos;s say yes)
WebElement resRequired = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-radio-group[name=&quot;responseRequired&quot;] md-radio-button[value=&quot;true&quot;]&apos;)));
resRequired.click();

// Finally, submit the form
WebElement btnSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[type=&quot;submit&quot;]&apos;)));
btnSubmit.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;The submission was completed within 1 second&apos;);
	WebElement btnSubmitAnother = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;submitAnother()&quot;]&apos;)));
	btnSubmitAnother.click();
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The submission was not completed within 1 second&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OPS WEB Scenario 1 - Driver Login" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  OPS WEB Special Scenario 1 - Driver Login
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should complete a login within 2 seconds
WebDriverWait twoSecWait = new WebDriverWait(browser, 2);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;OPSWeb&quot;));

// Find the badge field and enter the number
WebElement badge = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input[type=&quot;text&quot;]&apos;)));
badge.sendKeys(&apos;1609&apos;);

// Find the PIN field and enter the number
WebElement pin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input[type=&quot;password&quot;]&apos;)));
pin.sendKeys(&apos;1609&apos;);

// Click the login button
WebElement btnLogin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input.LoginButton&apos;)));
btnLogin.click();

// Wait until the timeout length for the results to load 
// look for the log off link to ensure that we logged in successfully
try{
	twoSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div.employeeHeader div#Menu7&apos;)));
	SampleResult.setResponseMessage(&apos;The login was completed within 2 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The login was not completed within 2 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OPS WEB Scenario 2 - Driver Paddle" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">/*
 *  OPS WEB Special Scenario 2 - Driver Paddle
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;

// Set up the Chrome Driver
System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should retrieve a driver paddle within 24 seconds
WebDriverWait longWait = new WebDriverWait(browser, 24);
Actions action = new Actions(browser);

// Start the browser and navigate to the site
browser.get(vars.get(&quot;OPSWeb&quot;));

// Find the badge field and enter the number
WebElement badge = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input[type=&quot;text&quot;]&apos;)));
badge.sendKeys(&apos;1609&apos;);

// Find the PIN field and enter the number
WebElement pin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input[type=&quot;password&quot;]&apos;)));
pin.sendKeys(&apos;1609&apos;);

// Click the login button
WebElement btnLogin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;LoginForm&quot;] input.LoginButton&apos;)));
btnLogin.click();

// Once logged in, open the Daily Assignments menu
WebElement dailyAssign = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div.employeeHeader div#Menu4&apos;)));
action.moveToElement(dailyAssign).perform();

// Click the Assignment Calendar
WebElement dailyCalen = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div.employeeHeader div#submenu div#Menu4_1&apos;)));
dailyCalen.click();

// Once the calendar loads, find and enter the search month
Select searchMonth = new Select(wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;select#Month&apos;))));
searchMonth.selectByValue(&apos;06&apos;);

// Find and enter the search year
Select searchYear = new Select(wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;select#Year&apos;))));
searchYear.selectByValue(&apos;2018&apos;);

// Submit the search form
WebElement searchSubmit = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.FilterTable a&apos;)));
searchSubmit.click();

// Once the results are loaded, find and click a driver paddle, preserving the current window handle
String parentWindow = browser.getWindowHandle(); 
WebElement paddle = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;table.CalendarTemplate a[title=&quot;View Paddle&quot;]&apos;)));
paddle.click();

// Need to switch to the new window, then wait for the paddle to load
// Should only be two window handles, so we want to get the &quot;other&quot; one
Set&lt;String&gt; handles =  browser.getWindowHandles();
for(String windowHandle : handles) {
	if(!windowHandle.equals(parentWindow)) {
     	browser.switchTo().window(windowHandle);
     }
}
// look for a map link from the &quot;bottom&quot; of the paddle
try{
	longWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;p.MapCell a&apos;)));
	SampleResult.setResponseMessage(&apos;The paddle was loaded within 24 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;The paddle was not loaded within 24 seconds&apos;);
}
finally{
	// Clean up
	browser.close();
	browser.switchTo().window(parentWindow);
	browser.quit();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Archived scenarios" enabled="false">
          <stringProp name="TestPlan.comments"> These are scenarios that are not complete or not required</stringProp>
        </GenericController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Trip Planner Scenario 9 - Waterfront Station" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">/*
 *  Trip Planner Special Scenario 9 - Waterfront Station - Change Lines and Stops
 *  
 *  Waterfront Station -&gt; Scott Exchange
 *  Arriving at 12:00 PM on Today’s Date with &quot;Get Lines and Stops for Origin only&quot; selected
 *  Results: Get Lines and Stops for Origin only - response under 1 second
 *  	De-select All - response under 1 second
 *  	Re-select 014EAST - response under 1 second
 *  
 *  Note: this is not required, per Elaine and Jason
 */

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.TimeoutException;

//need to ensure that geolocation services are turned off in the browser
Map&lt;String, Object&gt; locPrefs = new HashMap&lt;String, Object&gt;();
locPrefs.put(&quot;profile.default_content_setting_values.geolocation&quot;, 2);

System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;..\\lib\\chromedriver.exe&quot;);
ChromeOptions options = new ChromeOptions();

options.addArguments(&quot;--start-maximized&quot;);
options.setExperimentalOption(&quot;prefs&quot;, locPrefs);

WebDriver browser = new ChromeDriver(options);
// &quot;Standard&quot; wait time of 5 seconds
WebDriverWait wait = new WebDriverWait(browser, 5);
// This scenario should return itineraries after 10 seconds
WebDriverWait oneSecWait = new WebDriverWait(browser, 1);

// Start the browser and navigate to the site
browser.get(&apos;https://tripplanning.qa.translink.ca/#/app/tripplanning&apos;);

// Close the onboarding pane (the user agent has no cookies, so the pane is displayed every time)
WebElement btnCloseOnBoard = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;skiponboarding()&quot;]&apos;)));
btnCloseOnBoard.click();
// Pause for a second to let the pane close
Thread.sleep(1000);

// Set the desired options
// First, open the options dialog
WebElement btnOption = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button#tripplanning_options&apos;)));
btnOption.click();

// &quot;Depart By&quot; is default option so click the un-selected one to switch to &quot;Arrive By&quot;
WebElement btnArriveBy = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-dialog[aria-label=&quot;Trip Planning Options&quot;] md-tab-item[aria-selected=&quot;false&quot;]&apos;)));
btnArriveBy.click();

// Set the time
WebElement timePicker = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;form[name=&quot;arriveByForm&quot;] input[data-provide=&quot;timepicker&quot;]&apos;)));
timePicker.clear();
timePicker.sendKeys(&apos;12:00 PM&apos;);

// Don&apos;t have to set the date, since the default is today

// Can&apos;t set the &quot;origin stops only&quot;?

// Click the &quot;Done&quot; button to close the dialog box
WebElement btnDone = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;button[ng-click=&quot;reloadItinerary()&quot;]&apos;)));
btnDone.click();

// Find the origin field, and enter the location
WebElement origin = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Origin&quot;]&apos;)));
origin.sendKeys(&apos;Waterfront Station&apos;);

// Pick an origin location
WebElement originPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
originPick.click();

// Find the Destination field, and enter the location
WebElement destination = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;input[placeholder=&quot;Enter Destination&quot;]&apos;)));
destination.sendKeys(&apos;Scott Exchange&apos;);

// Pick a destination location
WebElement destPick = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;md-virtual-repeat-container[aria-hidden=&quot;false&quot;] ul.md-autocomplete-suggestions.searchbar-search-results li[role=&quot;button&quot;] span[ng-class=&quot;LOC&quot;]&apos;)));
destPick.click();

// Wait until the timeout length for the results to load
try{
	oneSecWait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(&apos;div[ng-click=&quot;clickItineraryDetails(itinerary)&quot;]&apos;)));
	SampleResult.setResponseMessage(&apos;At least one itinerary returned within 10 seconds&apos;);
}
catch (TimeoutException te) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&apos;Itineraries not returned within 10 seconds&apos;);
}
finally{
	// Clean up
	browser.quit();
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
